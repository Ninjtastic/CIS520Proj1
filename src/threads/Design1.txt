
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kien Le <kien@k-state.edu>
Ryan Woodburn <woodburn@k-state.edu>
Josh Vander Leest <josh18@ksu.edu>
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.
Wilson, Ryan. "Ryantimwilson/Pintos-Project-1." GitHub. N.p., 13 Oct. 2012. Web. 15 Sept. 2015.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Declare new list struct store sleeping threads
struct list listOfSleep;

In struct thread, declare 
int64_t wakeup_ticks; 
to count the ticks for wake up the thread

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

Get the current thread, disable interrupt, set the wake up ticks for this current thread equal to 
the timer ticks(number of ticks since OS booted) and the number of ticks of the thread.
Then insert this thread to the list of waiting(put it to sleep). Ordered this list by 
the wake up time, then block this thread by thread_block() function then let the interrupt enable it 
again after the time required passed.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

To achive the requirement, we set the wait list in sorted order. If the wait list is empty or 
the fisrt thread in the list is not pass the time to be wake up yet, the timer interrupt will 
keep on incrementing the time and calling the thread_tick function. Otherwise, we wake the 
sleeping thread.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

By reimplement the timer_sleep, only one thread will be allowed in the critical section.
First disable interrupts, count the ticks, insert the thread into list then re-enable interrupts.
By doing this, any other threads will have to wait before they can get access to the critical section. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

By disabling interrupts immediately before insertion into the shared list threads that are waiting and 
re-enabling interrupts again immediately after the list is updated, we avoided race condition.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

This design is easy to understand and effective to aviod race condition. By using list that are already
in the pintos system, the design itself does not require much of the implementation

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to thread.h
int init_priority -the initial priority (before donation) for the thread

struct lock *wait_on_lock -ponter to a lock that the thread is waiting on

struct list donations -The list of other threads waiting on locks the currient thread are holding.

struct list_elem donation_elem -The list of elements that can be added to another donation list.

>> B2: Explain the data structure used to track priority donation.

 If we have threads M, L and locks l:
L acquires lock l. M needs lock l so it donates its priority to L. L's donations is now: M, 
and M's wait_on_lock points to l. L's priority is now the max(M, L).

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Set up a waiters(struct list waiters) in semaphore to denotes all the threads that 
wait for the semaphore to be available. In this waiters list, the most front thread 
are the one that have the highest priority as this list get sorted before and after
the semaphore is released

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

First, update the current with the current lock then add it to the lock holder's donation list.
Then, while there is a lock that the current thread is waiting for, we set the lock holder's priority to equal to the thread's priority. Then we set this lock to be available for other thread.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

First, update the locks holder to NULL. Remove the thread that is waiting for the 
lock from the donation list. Once the lock is released, the priority donation gone. 
In the donation list, find the highest priority thread and set it to the current 
thread. Now the lock get pass to the waiting thread that have the highest priority. 
Lastly, yeild the processor if the current thread do not have the highest priority

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

As we read and write the current thread's priority, we have to turn off the tnterrupts
in thread_set_priority. Therefore, a potential race condition can occur when 
the thread's priority are being update, the interrupt handler at the same time is trying
to change it. Because of this, the priority variable can be mess up, thus the race
condition.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design after reading the instructions on KSOL, and we tried to choose the most straight forward and simplest path we could come up with. Some other designs we had were too simple however, and we had to add some extra functionality here and there to pass all the tests we could. 


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

